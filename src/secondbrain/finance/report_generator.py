"""
Financial report generation module for SecondBrain
"""
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Union, Any
import matplotlib.pyplot as plt
import numpy as np
from fpdf import FPDF
import json
import os
from scipy import stats
from sklearn.linear_model import LinearRegression
import seaborn as sns
from matplotlib.gridspec import GridSpec
import logging
from decimal import Decimal, InvalidOperation
import re
from dataclasses import dataclass
from enum import Enum

# Configure logging
logger = logging.getLogger(__name__)

class ReportType(Enum):
    """Types of income reports."""
    DAILY = "daily"
    WEEKLY = "weekly"
    MONTHLY = "monthly"
    CUSTOM = "custom"

@dataclass
class IncomeData:
    """Data class for income information."""
    source: str
    item: str
    revenue: Decimal
    date: datetime
    category: Optional[str] = None
    notes: Optional[str] = None

class ReportGenerationError(Exception):
    """Custom exception for report generation errors."""
    pass

class DataValidationError(Exception):
    """Custom exception for data validation errors."""
    pass

class IncomeSummaryPDF(FPDF):
    """Simple PDF report generator for income data with a clean, modern format."""
    
    def __init__(self, title: str = "SecondBrainApp Daily Income Summary"):
        """Initialize the report generator."""
        super().__init__()
        self.title = title
        self.set_auto_page_break(auto=True, margin=15)
        
    def header(self):
        """Add header to each page."""
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, self.title, ln=True, align="C")
        self.set_font("Arial", "", 12)
        self.cell(0, 10, f"Date: {datetime.now().strftime('%Y-%m-%d')}", ln=True, align="C")
        self.ln(10)
        
    def footer(self):
        """Add footer to each page."""
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, "Autogenerated by SecondBrainApp | Phantom AI", align="C")
        
    def income_table(self, data: List[Dict[str, str]]):
        """
        Add income table to the report.
        
        Args:
            data: List of dictionaries containing income data
        """
        # Table header
        self.set_font("Arial", "B", 12)
        self.cell(60, 10, "Income Source", border=1)
        self.cell(60, 10, "Details", border=1)
        self.cell(60, 10, "Amount (USD)", border=1)
        self.ln()
        
        # Table rows
        self.set_font("Arial", "", 12)
        total = Decimal('0')
        
        for entry in data:
            revenue = Decimal(str(entry["Revenue"]).replace(",", ""))
            total += revenue
            
            self.cell(60, 10, entry["Source"], border=1)
            self.cell(60, 10, entry["Item"], border=1)
            self.cell(60, 10, f"${revenue:,.2f}", border=1)
            self.ln()
        
        # Total row
        self.ln(10)
        self.set_font("Arial", "B", 12)
        self.cell(120, 10, "Total Daily Revenue", border=1)
        self.cell(60, 10, f"${total:,.2f}", border=1)

class IncomeReport(FPDF):
    """Advanced PDF report generator for income data with comprehensive analysis."""
    
    def __init__(self, title: str = "SecondBrain Income Report"):
        """Initialize the report generator."""
        super().__init__()
        self.title = title
        self.chart_dir = Path.home() / ".secondbrain" / "temp_charts"
        self.chart_dir.mkdir(parents=True, exist_ok=True)
        self.set_auto_page_break(auto=True, margin=15)
        self._validate_directories()
        
    def _validate_directories(self):
        """Validate and create necessary directories."""
        try:
            self.chart_dir.mkdir(parents=True, exist_ok=True)
            (Path.home() / ".secondbrain" / "reports").mkdir(parents=True, exist_ok=True)
            (Path.home() / ".secondbrain" / "data").mkdir(parents=True, exist_ok=True)
        except Exception as e:
            logger.error(f"Failed to create directories: {e}")
            raise ReportGenerationError(f"Failed to create necessary directories: {e}")

    def _validate_income_data(self, data: Union[Dict[str, float], List[Dict[str, str]]]) -> List[IncomeData]:
        """
        Validate and convert income data to standardized format.
        
        Args:
            data: Input income data
            
        Returns:
            List of validated IncomeData objects
            
        Raises:
            DataValidationError: If data validation fails
        """
        validated_data = []
        
        try:
            if isinstance(data, dict):
                # Convert dictionary format to list format
                for source, amount in data.items():
                    validated_data.append(IncomeData(
                        source=source,
                        item="",
                        revenue=Decimal(str(amount)),
                        date=datetime.now()
                    ))
            else:
                # Validate list format
                for entry in data:
                    if not all(k in entry for k in ["Source", "Revenue"]):
                        raise DataValidationError("Missing required fields in income data")
                    
                    # Clean and validate revenue
                    revenue_str = str(entry["Revenue"]).replace(",", "")
                    if not re.match(r'^\d+(\.\d{1,2})?$', revenue_str):
                        raise DataValidationError(f"Invalid revenue format: {revenue_str}")
                    
                    validated_data.append(IncomeData(
                        source=entry["Source"],
                        item=entry.get("Item", ""),
                        revenue=Decimal(revenue_str),
                        date=datetime.now(),
                        category=entry.get("Category"),
                        notes=entry.get("Notes")
                    ))
            
            return validated_data
            
        except (InvalidOperation, ValueError) as e:
            logger.error(f"Data validation error: {e}")
            raise DataValidationError(f"Invalid data format: {e}")
        except Exception as e:
            logger.error(f"Unexpected error during data validation: {e}")
            raise ReportGenerationError(f"Failed to validate data: {e}")

    def _format_currency(self, amount: Decimal) -> str:
        """Format currency amount with proper formatting."""
        return f"${amount:,.2f}"

    def _create_chart(self, data: List[IncomeData], chart_type: str) -> Path:
        """
        Create a chart and return its path.
        
        Args:
            data: List of IncomeData objects
            chart_type: Type of chart to create
            
        Returns:
            Path to the created chart file
        """
        try:
            plt.figure(figsize=(8, 6))
            
            if chart_type == "pie":
                revenues = [d.revenue for d in data]
                sources = [d.source for d in data]
                plt.pie(revenues, labels=sources, autopct='%1.1f%%')
                plt.title("Revenue Distribution by Source")
                
            elif chart_type == "bar":
                sources = [d.source for d in data]
                revenues = [d.revenue for d in data]
                bars = plt.bar(sources, revenues)
                plt.title("Revenue by Source")
                plt.xticks(rotation=45, ha='right')
                
                # Add value labels
                for bar in bars:
                    height = bar.get_height()
                    plt.text(bar.get_x() + bar.get_width()/2., height,
                            self._format_currency(Decimal(str(height))),
                            ha='center', va='bottom')
            
            plt.tight_layout()
            
            # Save chart
            chart_path = self.chart_dir / f"chart_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
            plt.savefig(chart_path, dpi=300, bbox_inches='tight')
            plt.close()
            
            return chart_path
            
        except Exception as e:
            logger.error(f"Failed to create chart: {e}")
            raise ReportGenerationError(f"Chart creation failed: {e}")

    def add_daily_summary(self, data: List[Dict[str, str]], title: str = "Daily Income Summary"):
        """
        Add a daily income summary section to the report.
        
        Args:
            data: List of dictionaries with Source, Item, and Revenue keys
            title: Section title
        """
        try:
            # Validate and convert data
            validated_data = self._validate_income_data(data)
            
            self.ln(10)
            self.set_font("Arial", "B", 12)
            self.cell(0, 10, title, ln=1)
            self.ln(5)
            
            # Add income table
            self._add_income_table(validated_data)
            
            # Add summary statistics
            self._add_summary_statistics(validated_data)
            
            # Add revenue distribution
            self._add_revenue_distribution(validated_data)
            
            # Add category analysis if categories are present
            if any(d.category for d in validated_data):
                self._add_category_analysis(validated_data)
            
        except Exception as e:
            logger.error(f"Failed to add daily summary: {e}")
            raise ReportGenerationError(f"Daily summary generation failed: {e}")

    def _add_income_table(self, data: List[IncomeData]):
        """Add income table to the report."""
        self.set_font("Arial", "", 11)
        self.set_fill_color(240, 240, 240)
        
        # Table header
        self.cell(60, 10, "Source", 1, 0, "C", 1)
        self.cell(60, 10, "Item", 1, 0, "C", 1)
        self.cell(60, 10, "Revenue", 1, 1, "C", 1)
        
        # Table rows
        total = Decimal('0')
        for entry in data:
            self.cell(60, 10, entry.source, 1)
            self.cell(60, 10, entry.item, 1)
            self.cell(60, 10, self._format_currency(entry.revenue), 1, 1)
            total += entry.revenue
        
        # Total row
        self.set_font("Arial", "B", 11)
        self.cell(120, 10, "Total", 1, 0, "C", 1)
        self.cell(60, 10, self._format_currency(total), 1, 1)

    def _add_summary_statistics(self, data: List[IncomeData]):
        """Add summary statistics to the report."""
        self.ln(10)
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, "Summary Statistics:", ln=1)
        
        revenues = [d.revenue for d in data]
        total_revenue = sum(revenues)
        avg_revenue = total_revenue / len(revenues)
        max_revenue = max(revenues)
        min_revenue = min(revenues)
        
        self.set_font("Arial", "", 11)
        self.cell(0, 10, f"Total Revenue: {self._format_currency(total_revenue)}", ln=1)
        self.cell(0, 10, f"Average Revenue per Source: {self._format_currency(avg_revenue)}", ln=1)
        self.cell(0, 10, f"Highest Revenue Source: {self._format_currency(max_revenue)}", ln=1)
        self.cell(0, 10, f"Lowest Revenue Source: {self._format_currency(min_revenue)}", ln=1)

    def _add_revenue_distribution(self, data: List[IncomeData]):
        """Add revenue distribution visualization to the report."""
        self.ln(10)
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, "Revenue Distribution:", ln=1)
        
        try:
            chart_path = self._create_chart(data, "pie")
            self.image(str(chart_path), x=10, y=None, w=190)
            self.ln(100)
            os.remove(chart_path)
        except Exception as e:
            logger.error(f"Failed to add revenue distribution: {e}")
            self.cell(0, 10, "Failed to generate revenue distribution chart", ln=1)

    def _add_category_analysis(self, data: List[IncomeData]):
        """Add category analysis to the report if categories are present."""
        self.ln(10)
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, "Category Analysis:", ln=1)
        
        # Group by category
        categories = {}
        for entry in data:
            if entry.category:
                if entry.category not in categories:
                    categories[entry.category] = Decimal('0')
                categories[entry.category] += entry.revenue
        
        # Add category breakdown
        self.set_font("Arial", "", 11)
        for category, revenue in categories.items():
            self.cell(0, 10, f"{category}: {self._format_currency(revenue)}", ln=1)

def generate_income_report(
    data: Union[Dict[str, float], List[Dict[str, str]]],
    output_path: Optional[str] = None,
    title: str = "SecondBrain Income Report",
    historical_data: Optional[List[Dict[str, float]]] = None,
    include_charts: bool = True,
    forecast_days: int = 30,
    is_daily_summary: bool = False,
    report_type: ReportType = ReportType.DAILY,
    use_simple_format: bool = False
) -> str:
    """
    Generate income report PDF.
    
    Args:
        data: Income data in either dictionary or list format
        output_path: Path to save the PDF (optional)
        title: Report title
        historical_data: List of historical income data
        include_charts: Whether to include charts in the report
        forecast_days: Number of days to forecast
        is_daily_summary: Whether this is a daily summary report
        report_type: Type of report to generate
        use_simple_format: Whether to use the simple format
        
    Returns:
        Path to generated PDF file
        
    Raises:
        ReportGenerationError: If report generation fails
        DataValidationError: If data validation fails
    """
    try:
        if output_path is None:
            base_dir = Path.home() / ".secondbrain" / "reports"
            base_dir.mkdir(parents=True, exist_ok=True)
            output_path = str(base_dir / f"income_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf")
        
        if use_simple_format:
            pdf = IncomeSummaryPDF(title=title)
            pdf.add_page()
            pdf.income_table(data)
        else:
            pdf = IncomeReport(title=title)
            pdf.add_page()
            
            if is_daily_summary:
                pdf.add_daily_summary(data, title)
            else:
                # Add content
                pdf.income_table(data)
                if include_charts:
                    pdf.add_chart(data, "pie")
                    pdf.add_chart(data, "bar")
                    pdf.add_chart(data, "radar")
                    pdf.add_chart(data, "heatmap")
                
                if historical_data:
                    pdf.add_summary(data, historical_data)
                    pdf.add_trend_analysis(historical_data)
                    pdf.add_comparative_analysis(data, historical_data)
                    pdf.add_risk_analysis(data, historical_data)
                    pdf.add_forecast(historical_data, forecast_days)
                
                pdf.add_recommendations(data)
        
        # Save report
        pdf.output(output_path)
        
        # Save data for future reference
        data_dir = Path.home() / ".secondbrain" / "data"
        data_dir.mkdir(parents=True, exist_ok=True)
        
        with open(data_dir / f"income_data_{datetime.now().strftime('%Y%m%d')}.json", "w") as f:
            json.dump({
                "date": datetime.now().isoformat(),
                "data": data,
                "historical_data": historical_data,
                "report_type": report_type.value,
                "format": "simple" if use_simple_format else "advanced"
            }, f, indent=4)
        
        logger.info(f"Successfully generated income report: {output_path}")
        return output_path
        
    except Exception as e:
        logger.error(f"Failed to generate income report: {e}")
        raise ReportGenerationError(f"Report generation failed: {e}") 